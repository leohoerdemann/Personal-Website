---
const { title = "New Window", Width = "12", Height = "12", x, y} = Astro.props;
---

<div id={title} 
class="window glass draggable"
data-prev-width={Width} 
data-prev-height={Height} 
data-prev-left={x} 
data-prev-top={y} 
data-maximized="false"
style={`width: ${Width}vw; height: ${Height}vh; left: ${x}%; top: ${y}%;`}>
  <div class="title-bar">
    <div class="title-bar-text">{title}</div>
    <div class="title-bar-controls">
      <button class="minimize-button" aria-label="Minimize"></button> <!-- Minimize button triggers minimizeWindow -->
      <button class="maximize-button" aria-label="Maximize"></button> <!-- Maximize button triggers maximizeWindow -->
      <button class = "close-button" aria-label="Close"></button> <!-- Close button triggers toggleWindow -->
    </div>
  </div>

  <!-- Resizable borders -->
  <div class="resize-handle top"></div>
  <div class="resize-handle right"></div>
  <div class="resize-handle bottom"></div>
  <div class="resize-handle left"></div>

  <!-- Diagonal corner handles -->
  <div class="resize-handle top-left"></div>
  <div class="resize-handle top-right"></div>
  <div class="resize-handle bottom-left"></div>
  <div class="resize-handle bottom-right"></div>

  <!-- Window body with scaling content -->
  <div class="window-body has-scrollbar">
    <slot />
  </div>
</div>

<style>
  .window {
    position: absolute;
    display: flex;
    flex-direction: column;
    overflow: hidden;
    box-sizing: border-box;
  }

  .window-body {
    /* Make sure the content scales when the window is resized */
    height: 100%;
    overflow-y: auto;
    overflow-x: hidden;
    box-sizing: border-box;
  }

  /* Resizing handles */
  .resize-handle {
    position: absolute;
    z-index: 1;
  }

  .resize-handle.top {
    top: 0;
    left: 0;
    right: 0;
    height: 5px;
    cursor: ns-resize;
  }

  .resize-handle.right {
    right: 0;
    top: 0;
    bottom: 0;
    width: 5px;
    cursor: ew-resize;
  }

  .resize-handle.bottom {
    bottom: 0;
    left: 0;
    right: 0;
    height: 5px;
    cursor: ns-resize;
  }

  .resize-handle.left {
    left: 0;
    top: 0;
    bottom: 0;
    width: 5px;
    cursor: ew-resize;
  }

  /* Corner resize handles */
  .resize-handle.top-left, .resize-handle.top-right, .resize-handle.bottom-left, .resize-handle.bottom-right {
    width: 10px;
    height: 10px;
    position: absolute;
    cursor: nwse-resize; /* Diagonal cursor */
    z-index: 2;
  }

  .resize-handle.top-left {
    top: 0;
    left: 0;
    cursor: nwse-resize;
  }

  .resize-handle.top-right {
    top: 0;
    right: 0;
    cursor: nesw-resize;
  }

  .resize-handle.bottom-left {
    bottom: 0;
    left: 0;
    cursor: nesw-resize;
  }

  .resize-handle.bottom-right {
    bottom: 0;
    right: 0;
    cursor: nwse-resize;
  }


  .hidden {
    display: none;
  }

  /* Windows 7 style animations */
  @keyframes windowOpen {
    0% {
      transform: scale(0.5);
      opacity: 0;
    }
    100% {
      transform: scale(1);
      opacity: 1;
    }
  }

  @keyframes windowClose {
    0% {
      transform: scale(1);
      opacity: 1;
    }
    100% {
      transform: scale(0.5);
      opacity: 0;
    }
  }

  .open-animation {
    animation: windowOpen 0.3s ease-out;
  }

  .close-animation {
    animation: windowClose 0.3s ease-in;
  }
</style>
