---
---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>Simple Breakout Game</title>
    <style>
      body {
        margin: 0;
        padding: 0;
        background: #000;
        color: #fff;
        font-family: Arial, sans-serif;
        text-align: center;
      }

      #gameCanvas {
        display: block;
        margin: 20px auto;
        background: #222;
        border: 1px solid #fff;
      }

      #startButton,
      #tryAgainButton {
        padding: 10px 20px;
        font-size: 1rem;
        margin-top: 20px;
        cursor: pointer;
      }

      #pauseText {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        font-size: 2rem;
        display: none;
      }
    </style>
  </head>
  <body>
    <h1>Breakout Game</h1>
    <canvas id="gameCanvas" width="480" height="320"></canvas>
    <div id="startScreen">
      <button id="startButton">Start Game</button>
    </div>
    <div id="gameOverScreen" style="display: none;">
      <h2>Game Over</h2>
      <button id="tryAgainButton">Try Again</button>
    </div>
    <div id="pauseText">Paused</div>

    <script is:inline>
      const canvas = document.getElementById('gameCanvas');
      const ctx = canvas.getContext('2d');

      let rightPressed = false;
      let leftPressed = false;
      let isPaused = false;

      // Game variables
      let x, y;
      let dx, dy;
      let ballRadius;
      let paddleHeight, paddleWidth, paddleX;
      let brickRowCount, brickColumnCount, brickWidth, brickHeight, brickPadding, brickOffsetTop, brickOffsetLeft;
      let bricks;
      let score, lives;
      let gameInterval;

      // Initialize game variables
      function initGame() {
        x = canvas.width / 2;
        y = canvas.height - 30;
        dx = 2;
        dy = -2;
        ballRadius = 10;

        paddleHeight = 10;
        paddleWidth = 75;
        paddleX = (canvas.width - paddleWidth) / 2;

        brickRowCount = 3;
        brickColumnCount = 5;
        brickWidth = 75;
        brickHeight = 20;
        brickPadding = 10;
        brickOffsetTop = 30;
        brickOffsetLeft = 30;

        bricks = [];
        for (let c = 0; c < brickColumnCount; c++) {
          bricks[c] = [];
          for (let r = 0; r < brickRowCount; r++) {
            bricks[c][r] = { x: 0, y: 0, status: 1 };
          }
        }

        score = 0;
        lives = 3;
      }

      // Draw functions
      function drawBall() {
        ctx.beginPath();
        ctx.arc(x, y, ballRadius, 0, Math.PI * 2);
        ctx.fillStyle = '#0095DD';
        ctx.fill();
        ctx.closePath();
      }

      function drawPaddle() {
        ctx.beginPath();
        ctx.rect(paddleX, canvas.height - paddleHeight, paddleWidth, paddleHeight);
        ctx.fillStyle = '#0095DD';
        ctx.fill();
        ctx.closePath();
      }

      function drawBricks() {
        for (let c = 0; c < brickColumnCount; c++) {
          for (let r = 0; r < brickRowCount; r++) {
            if (bricks[c][r].status == 1) {
              let brickX = c * (brickWidth + brickPadding) + brickOffsetLeft;
              let brickY = r * (brickHeight + brickPadding) + brickOffsetTop;
              bricks[c][r].x = brickX;
              bricks[c][r].y = brickY;
              ctx.beginPath();
              ctx.rect(brickX, brickY, brickWidth, brickHeight);
              ctx.fillStyle = '#0095DD';
              ctx.fill();
              ctx.closePath();
            }
          }
        }
      }

      function drawScore() {
        ctx.font = '16px Arial';
        ctx.fillStyle = '#fff';
        ctx.fillText('Score: ' + score, 8, 20);
      }

      function drawLives() {
        ctx.font = '16px Arial';
        ctx.fillStyle = '#fff';
        ctx.fillText('Lives: ' + lives, canvas.width - 65, 20);
      }

      // Collision detection
      function collisionDetection() {
        for (let c = 0; c < brickColumnCount; c++) {
          for (let r = 0; r < brickRowCount; r++) {
            let b = bricks[c][r];
            if (b.status == 1) {
              if (
                x > b.x &&
                x < b.x + brickWidth &&
                y > b.y &&
                y < b.y + brickHeight
              ) {
                dy = -dy;
                b.status = 0;
                score++;
                if (score == brickRowCount * brickColumnCount) {
                  alert('YOU WIN, CONGRATULATIONS!');
                  document.location.reload();
                }
              }
            }
          }
        }
      }

      // Main draw function
      function draw() {
        if (isPaused) return;
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        drawBricks();
        drawBall();
        drawPaddle();
        drawScore();
        drawLives();
        collisionDetection();

        if (x + dx > canvas.width - ballRadius || x + dx < ballRadius) {
          dx = -dx;
        }
        if (y + dy < ballRadius) {
          dy = -dy;
        } else if (y + dy > canvas.height - ballRadius) {
          if (x > paddleX && x < paddleX + paddleWidth) {
            dy = -dy;
          } else {
            lives--;
            if (!lives) {
              clearInterval(gameInterval);
              showGameOverScreen();
            } else {
              x = canvas.width / 2;
              y = canvas.height - 30;
              dx = 2;
              dy = -2;
              paddleX = (canvas.width - paddleWidth) / 2;
            }
          }
        }

        if (rightPressed && paddleX < canvas.width - paddleWidth) {
          paddleX += 7;
        } else if (leftPressed && paddleX > 0) {
          paddleX -= 7;
        }

        x += dx;
        y += dy;
      }

      // Event listeners
      document.addEventListener('keydown', keyDownHandler, false);
      document.addEventListener('keyup', keyUpHandler, false);
      document.addEventListener('mousemove', mouseMoveHandler, false);

      function keyDownHandler(e) {
        if (e.key == 'Right' || e.key == 'ArrowRight') {
          rightPressed = true;
        } else if (e.key == 'Left' || e.key == 'ArrowLeft') {
          leftPressed = true;
        } else if (e.key == 'p' || e.key == 'P') {
          togglePause();
        }
      }

      function keyUpHandler(e) {
        if (e.key == 'Right' || e.key == 'ArrowRight') {
          rightPressed = false;
        } else if (e.key == 'Left' || e.key == 'ArrowLeft') {
          leftPressed = false;
        }
      }

      function mouseMoveHandler(e) {
        const relativeX = e.clientX - canvas.offsetLeft;
        if (relativeX > 0 && relativeX < canvas.width) {
          paddleX = relativeX - paddleWidth / 2;
        }
      }

      function togglePause() {
        isPaused = !isPaused;
        const pauseText = document.getElementById('pauseText');
        if (isPaused) {
          pauseText.style.display = 'block';
        } else {
          pauseText.style.display = 'none';
        }
      }

      // Start and Game Over screens
      const startScreen = document.getElementById('startScreen');
      const startButton = document.getElementById('startButton');
      const gameOverScreen = document.getElementById('gameOverScreen');
      const tryAgainButton = document.getElementById('tryAgainButton');

      startButton.addEventListener('click', startGame);
      tryAgainButton.addEventListener('click', () => {
        document.location.reload();
      });

      function startGame() {
        startScreen.style.display = 'none';
        initGame();
        gameInterval = setInterval(draw, 10);
      }

      function showGameOverScreen() {
        gameOverScreen.style.display = 'block';
      }
    </script>
  </body>
</html>
